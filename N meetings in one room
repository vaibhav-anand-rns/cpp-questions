class solution{
    public:
          
          struct meeting{
              
              int start,end,pos;
          }
          bool static cmp(Meeting m1, Meeting m2){
              
              if(m1.end == m2.end){
                  return m1.pos<m2.pos //go by indexing
              }
              return m1.end<m2.end;
          }
          
          vector<int> maxMeetings(vector<int> &start, vector<int> &end, int n){
              
              vector<Meeting> meetings(n);
              // schedule the meetings
              for(int i = 0; i<n; i++){
                  
                  meetings[i].start = start[i];
                  meetings[i].end = end[i];
                  meetings[i].pos = i+1;
              }
              sort(meetings.begin(),meetings.end(),cmp);
              vector<int> ans;
              ans.push_back(meetings[0].pos);
              int limit = meetings[0].end;
              // Step 2: Select meetings greedily
              for(int i = 1; i<n; i++){
                  if(meetings[i].start >limit){
                      ans.push_back(meetings[i].pos);
                      limit = meetings.end;
                  }
              }
          }
          return ans;
}
