#include <iostream>
#include <vector>
#include <set>
using namespace std;

const int MAXN = 100005;
vector<int> adj[MAXN];
bool visited[MAXN];
int tin[MAXN], low[MAXN];
set<int> articulation_points;
int timer = 0;

void dfs(int u, int parent) {
    visited[u] = true;
    tin[u] = low[u] = timer++;
    int children = 0;

    for (int v : adj[u]) {
        if (v == parent) continue;

        if (visited[v]) {
            // Back edge
            low[u] = min(low[u], tin[v]);
        } else {
            // Tree edge
            dfs(v, u);
            low[u] = min(low[u], low[v]);

            if (low[v] >= tin[u] && parent != -1) {
                articulation_points.insert(u);
            }

            children++;
        }
    }

    // Special case: root node
    if (parent == -1 && children > 1) {
        articulation_points.insert(u);
    }
}

void findArticulationPoints(int n) {
    timer = 0;
    articulation_points.clear();
    fill(visited, visited + n, false);

    for (int i = 0; i < n; ++i) {
        if (!visited[i])
            dfs(i, -1);
    }
}

int main() {
    int n, m;
    cin >> n >> m; // number of nodes and edges

    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    findArticulationPoints(n);

    cout << "Articulation Points in the graph:\n";
    for (int point : articulation_points) {
        cout << point << "\n";
    }

    return 0;
}
