#include <bits/stdc++.h>
using namespace std;

int maxProfitRec(int i, int canBuy, int cap, vector<int> &prices, vector<vector<vector<int>>> &dp) {
    int n = prices.size();
    if (i == n || cap == 0) return 0; // base case

    if (dp[i][canBuy][cap] != -1) return dp[i][canBuy][cap];

    if (canBuy) {
        // Option 1: Buy today, Option 2: Skip today
        return dp[i][canBuy][cap] = max(
            -prices[i] + maxProfitRec(i+1, 0, cap, prices, dp),
            maxProfitRec(i+1, 1, cap, prices, dp)
        );
    } else {
        // Option 1: Sell today, Option 2: Skip today
        return dp[i][canBuy][cap] = max(
            prices[i] + maxProfitRec(i+1, 1, cap-1, prices, dp),
            maxProfitRec(i+1, 0, cap, prices, dp)
        );
    }
}

int maxProfit(int k, vector<int> &prices) {
    int n = prices.size();
    vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k+1, -1)));
    return maxProfitRec(0, 1, k, prices, dp);
}

int main() {
    int k = 2;
    vector<int> prices = {3,2,6,5,0,3};
    cout << "Maximum Profit = " << maxProfit(k, prices) << endl;
    return 0;
}
