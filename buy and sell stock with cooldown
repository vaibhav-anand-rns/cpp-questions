#include <bits/stdc++.h>
using namespace std;

int maxProfitRec(int i, int canBuy, vector<int> &prices, vector<vector<int>> &dp) {
    int n = prices.size();
    if (i >= n) return 0; // base case

    if (dp[i][canBuy] != -1) return dp[i][canBuy];

    if (canBuy) {
        // Option 1: Buy today, Option 2: Skip today
        return dp[i][canBuy] = max(
            -prices[i] + maxProfitRec(i+1, 0, prices, dp),
            maxProfitRec(i+1, 1, prices, dp)
        );
    } else {
        // Option 1: Sell today, Option 2: Skip today
        return dp[i][canBuy] = max(
            prices[i] + maxProfitRec(i+2, 1, prices, dp), // cooldown applied
            maxProfitRec(i+1, 0, prices, dp)
        );
    }
}

int maxProfit(vector<int> &prices) {
    int n = prices.size();
    vector<vector<int>> dp(n, vector<int>(2, -1));
    return maxProfitRec(0, 1, prices, dp); // start day 0, can buy
}

int main() {
    vector<int> prices = {1,2,3,0,2};
    cout << "Maximum Profit = " << maxProfit(prices) << endl;
    return 0;
}
