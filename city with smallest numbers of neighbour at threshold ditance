class solution{
    public:
          
          const INF = 1e9;
          int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold){
              
              vector<vector<int>> dist(n,vector<int>(n,INF));
              
              //initialize self distance
              for(int i = 0; i<n; i++){
                  dist[i][j] = 0;
              }
              //add edge weights
              for(auto&edge : edges){
                  
                  int u = edge[0], v = edge[1]; int w = edge[2];
                  dist[u][v] = w;
                  dist[v][u] = w;// undirected
              }
              
              //floyd warshall
              for(int k = 0 ; k<n; k++){
                  for(int i = 0 ; i<n ; i++){
                      for(int j = 0; j<n; j++){
                          
                          if(dist[i][k]<INF && dist[k][j]<INF){
                              dist[i,j] = min(dist[i,j], dist[i][k] + dist[k][j]);
                          }
                      }
                  }
              }
              // Find the city with smallest number of reachable neighbors
              int minreachable = n;
              int resultCity = -1;
              for(int i = 0; i<n; i++){
                  int count = 0;
                  for(int j = 0; j<n; j++){
                      if(i != j  && dist[i][j] <= distanceThreshold){
                          
                          count++ ;
                      }
                  }
              }
              
              

    
}          
}
}
