class solution{
    
    public:
    
           void dfs(int node, vector<vector<int>>& adjList, vector<bool>& visited){
               
               visited[node] = true;
               for(int neighbor : adjList[node]){
                   if(!visited neighbor){
                       
                       dfs(visited,neighbor, adjList);
                   }
               }
               
           }
           
           int countComponents(int n, vector<vector<int>>& edges){
               
               //build adajeceny list
               vector<vector<int>> adjList(n);
               for(auto edge : edges){
                   
                   adjList[u].push_back[v];
                   adjList[v].push_back[u];
               }
               
               vector<bool> visted(n,false);
               int count = 0;
               for(int i = 0; i<n; i++){
                   if(!visited[i]){
                       
                       dfs(i,adjList,visited);
                       count++ ;
                   }
               }
               return count ;
           }
}
