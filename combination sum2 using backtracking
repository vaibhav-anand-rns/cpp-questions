class solution{
    public:
    
           vector<vector<int>>combinationsum2(vector<int> &candidates, int target){
               
               sort(candidates.begin(),candidates.end());// to handle duplicates
               vector<vector<int>> &result;
               vector<int> current;
               backtrack(candidates,target,0,current,result);
               return result;
               
           }
    private:
            void backtrack(vector<int> &candidates,int target, int start, vector<int> current,vector<vector<int>> &result){
                
                if(target == 0){
                    
                    result.push_back(current);
                    return;
                }
                
                for(int i = 1; i<candidates.size();i++){
                    
                    //skip duplicates
                    
                    if(i>start &&  candidates[i] == candidates[i-1]){
                        continue;
                    }
                    
                    current.push_back(candidates[i]);  // Choose
                    backtrack(candidates,target-candidates[i],i+1,current,result);
                    current.pop_back(); //un-choose
            
                }
                
            }
}         
  
