#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
private:
    unordered_map<int, int> inorderMap; // value -> index
    int postIndex;

    TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd) {
        if (inStart > inEnd) return nullptr;

        // The current root is at postIndex in postorder
        int rootVal = postorder[postIndex--];
        TreeNode* root = new TreeNode(rootVal);

        // Get index of root value in inorder to divide left/right
        int inIndex = inorderMap[rootVal];

        // ⚠️ Important: build right subtree first because we're going backward in postorder
        root->right = buildTreeHelper(inorder, postorder, inIndex + 1, inEnd);
        root->left = buildTreeHelper(inorder, postorder, inStart, inIndex - 1);

        return root;
    }

public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        postIndex = postorder.size() - 1;

        // Build a map for quick index lookup in inorder
        for (int i = 0; i < inorder.size(); ++i)
            inorderMap[inorder[i]] = i;

        return buildTreeHelper(inorder, postorder, 0, inorder.size() - 1);
    }
};
