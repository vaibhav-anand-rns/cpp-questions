#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Binary Tree Node
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
private:
    int preIndex = 0;
    unordered_map<int, int> postIndexMap;

    TreeNode* build(vector<int>& preorder, vector<int>& postorder, int postStart, int postEnd) {
        if (preIndex >= preorder.size() || postStart > postEnd)
            return nullptr;

        // Create root from preorder
        TreeNode* root = new TreeNode(preorder[preIndex++]);

        // Base case: leaf node
        if (postStart == postEnd)
            return root;

        // Next element in preorder is left child
        int leftVal = preorder[preIndex];
        int index = postIndexMap[leftVal];

        // Recursively build left and right subtrees
        root->left = build(preorder, postorder, postStart, index);
        root->right = build(preorder, postorder, index + 1, postEnd - 1); // exclude root (last in postorder)

        return root;
    }

public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        // Map postorder value to its index
        for (int i = 0; i < postorder.size(); ++i) {
            postIndexMap[postorder[i]] = i;
        }

        return build(preorder, postorder, 0, postorder.size() - 1);
    }
};
