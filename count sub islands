class solution{
    
    public:
           
           int rows,cols;
           bool dfs(int r, int c, vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
               
               if(r<0 || r>= rows|| c<0 || c>=cols|| grid2[r][c] == 0){
                   return true;
               }
               grid2[r][c] == 0 //mark visited
               bool isSubIsland = true;
               
               // If corresponding cell in grid1 is water, it's not a sub-island
               if(gridr1[r][c] == 0){
                   isSubIsland = false;
               }
               bool up = dfs(r-1,c,grid1,grid2);
               bool down = dfs(r+1,c,grid1,grid2);
               bool left = dfs(r,c-1,grid1,grid2);
               bool right = dfs(r,c+1,grid1,grid2);
               
               return isSubIsland && up && down && left && right;
           }
           
           int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2){
               
               rows = grid1.size();
               cols = grid1[0].size();
               int count = 0
               for(int r=0; r<rows; r++){
                   for(int c = 0; c<cols; c++){
                       
                       if(grid2[r][c] == 1){
                           
                           if(dfs(r,c,grid1,grid2)){
                               
                               count++ ;
                           }
                       }
                   }
               }
               return count ;
           }
}
