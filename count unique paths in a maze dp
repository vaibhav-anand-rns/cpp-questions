#include <iostream>
#include <vector>
using namespace std;

class Solution {
    vector<vector<int>> maze;
    int m, n;
    vector<vector<int>> memo;

    int countPaths(int i, int j) {
        // Out of bounds or blocked
        if (i >= m || j >= n || maze[i][j] == 1) return 0;

        // Reached destination
        if (i == m - 1 && j == n - 1) return 1;

        if (memo[i][j] != -1) return memo[i][j];

        int pathsRight = countPaths(i, j + 1);
        int pathsDown = countPaths(i + 1, j);

        memo[i][j] = pathsRight + pathsDown;
        return memo[i][j];
    }

public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        maze = grid;
        m = maze.size();
        n = maze[0].size();
        memo.assign(m, vector<int>(n, -1));

        return countPaths(0, 0);
    }
};

int main() {
    vector<vector<int>> maze = {
        {0, 0, 0},
        {0, 1, 0},
        {0, 0, 0}
    };

    Solution sol;
    cout << "Number of unique paths: " << sol.uniquePathsWithObstacles(maze) << endl;

    return 0;
}
