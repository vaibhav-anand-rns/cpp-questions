class solution{
    public:
          
          bool canFinish(int numCourses, vector<vector<int>>& prerequisites){
              
              vector<vector<int>>graph(numCourses);
              vector<int> inDegree(numCourses,0);
              
              //build graph and indegree array
              
              for(auto &pair : prerequisites){
                  int course = pair[0];
                  int prereq = pair[1];
                  graph[prereq].push_back[course];
                  indegree[course]++ ;
              }
              
          }
          //queue of courses with no prerequsiite
          queue<int>q;
          for(int i = 0; i<numCourses; i++){
              
              if(indegree[i] == 0){
                  q.push(i);
              }
              
              
          }
          int count = 0;
          //bfs traversal
          while(!q.empty()){
              
              int curr = q.front();
              q.pop();
              count++ ;
          }
          for(int neighbor : graph[node]){
              
              indegree[neighbor]-- ;
              if(indegree[neighbor] == 0){
                  q.push(neighbor);
              }
          }
}
