class solution{
    public:
    
           vector<int> eventualSafeNodes(vector<vector<int>>& graph){
               
               int n = graph.size();
               vector<int> color(n,0); //0=unvisited, 1= notsafe 2 = safe
               vector<int>result;
               for(int i = 0; i<n; i++){
                   if(dfs(i,graph,color)){
                       
                       result.push_back(i);
                   }
               }
               return result;
               
           }
    private:
           
           bool dfs(int node, vector<vector<int>>& graph, vector<int>& color){
               
               if(color[node] == 1){
                   return false;
               }
               if(color[node] == 2){
                   return true;
               }
               color[node] = 1; //mark as visited
               
               for(int neighbor : graph[node]){
                   
                   if(!dfs(neighbor,graph,color)){
                       return false;
                   }
               }
               color[node] = 2;
               return true;
               
               
           }
           
           
}
