#include <iostream>
#include <vector>
using namespace std;

// Find first index of target
int findFirst(vector<int>& nums, int target) {
    int index = -1;
    int left = 0, right = nums.size() - 1;
    
    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            index = mid;         // Record the index
            right = mid - 1;     // Keep looking on the left
        }
        else if (nums[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
    
    return index;
}

// Find last index of target
int findLast(vector<int>& nums, int target) {
    int index = -1;
    int left = 0, right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            index = mid;
            left = mid + 1;     // Keep looking on the right
        }
        else if (nums[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }

    return index;
}

vector<int> searchRange(vector<int>& nums, int target) {
    int first = findFirst(nums, target);
    int last = findLast(nums, target);
    return {first, last};
}

int main() {
    vector<int> nums = {5, 7, 7, 8, 8, 10};
    int target = 8;
    vector<int> result = searchRange(nums, target);
    cout << "First and Last Position: [" << result[0] << ", " << result[1] << "]" << endl;
    return 0;
}
