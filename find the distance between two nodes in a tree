#include <iostream>
using namespace std;

// Tree node definition
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Function to find the LCA (Lowest Common Ancestor)
TreeNode* findLCA(TreeNode* root, int n1, int n2) {
    if (!root) return NULL;

    if (root->val == n1 || root->val == n2)
        return root;

    TreeNode* leftLCA = findLCA(root->left, n1, n2);
    TreeNode* rightLCA = findLCA(root->right, n1, n2);

    if (leftLCA && rightLCA)
        return root;

    return leftLCA ? leftLCA : rightLCA;
}

// Function to find distance from root to a given key
int findDistance(TreeNode* root, int key, int level) {
    if (!root) return -1;

    if (root->val == key)
        return level;

    int left = findDistance(root->left, key, level + 1);
    if (left != -1)
        return left;

    return findDistance(root->right, key, level + 1);
}

// Main function to find distance between two nodes
int distanceBetweenNodes(TreeNode* root, int n1, int n2) {
    TreeNode* lca = findLCA(root, n1, n2);
    if (!lca) return -1; // One or both nodes not found

    int d1 = findDistance(lca, n1, 0);
    int d2 = findDistance(lca, n2, 0);

    return d1 + d2;
}

// Example usage
int main() {
    /*
             1
           /   \
          2     3
         / \   / \
        4   5 6   7
    */

    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    int n1 = 4, n2 = 5;
    cout << "Distance between " << n1 << " and " << n2 << " is: "
         << distanceBetweenNodes(root, n1, n2) << endl;

    n1 = 4, n2 = 6;
    cout << "Distance between " << n1 << " and " << n2 << " is: "
         << distanceBetweenNodes(root, n1, n2) << endl;

    return 0;
}
