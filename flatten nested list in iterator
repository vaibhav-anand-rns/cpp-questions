class NestedIterator {
private:
    stack<NestedInteger> st;  // LIFO structure to hold elements

public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        // Push elements from end to beginning (reverse order)
        for (int i = nestedList.size() - 1; i >= 0; i--) {
            st.push(nestedList[i]);
        }
    }

    int next() {
        // Assumes hasNext() is true
        int val = st.top().getInteger();
        st.pop();
        return val;
    }

    bool hasNext() {
        while (!st.empty()) {
            NestedInteger curr = st.top();

            if (curr.isInteger()) {
                return true;  // Top is a number, ready to return
            }

            // If top is a list, expand it
            st.pop();
            const vector<NestedInteger> &list = curr.getList();
            for (int i = list.size() - 1; i >= 0; i--) {
                st.push(list[i]);  // Push elements of list in reverse order
            }
        }

        return false;
    }
};
