#include <iostream>
#include <vector>
#include <limits>

using namespace std;

const int INF = 1e9;

void floydWarshall(int n, vector<vector<int>>& dist) {
    // Run Floyd-Warshall
    for (int k = 0; k < n; ++k) {         // Intermediate node
        for (int i = 0; i < n; ++i) {     // Start node
            for (int j = 0; j < n; ++j) { // End node
                if (dist[i][k] < INF && dist[k][j] < INF)
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
            }
        }
    }

    // Check for negative cycles
    for (int i = 0; i < n; ++i) {
        if (dist[i][i] < 0) {
            cout << "Negative cycle detected!\n";
            return;
        }
    }

    // Print shortest distances
    cout << "All-pairs shortest distances:\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (dist[i][j] == INF)
                cout << "INF ";
            else
                cout << dist[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int n = 4;
    vector<vector<int>> dist(n, vector<int>(n, INF));

    // Initialize distances
    for (int i = 0; i < n; ++i)
        dist[i][i] = 0;

    // Add edges: u â†’ v with weight w
    dist[0][1] = 5;
    dist[0][3] = 10;
    dist[1][2] = 3;
    dist[2][3] = 1;

    floydWarshall(n, dist);

    return 0;
}
