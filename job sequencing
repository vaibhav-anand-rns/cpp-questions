class solution{
    public:
          
          struct job{
              int id,deadline,profit;
          };
          
          // Step 1: Sort jobs by profit (biggest first)
          
          bool compare(job A, job B){
              return A.profit>B.proft;
          }
          pair<int,int> jobsequencing(Job jobs[], int n){
              
              //sort jobs by profit
              sort(jobs,jobs+n,compare);
              // find the maximum deadline
              int maxdeadline = 0;
              for(int i = 0; i<n; i++){
                  maxdeadline = max(maxdeadline,jobs[i].deadline);
                  
              }
              
              // Step 3: Create empty slots
              vector<int>slot(maxdeadline+1,-1);
              int countjobs = 0, maxprofit = 0;
                // Step 4: Try to schedule each job
              for(int i = 0; i<n; i++){
                  // Put job in the latest free slot before deadline
                  for(int j = jobs[i].deadline; j>0; j--){
                      
                      if(slot[j] == -1){// slot j is free
                          slot[j] = jobs[i].id;
                      }
                      countjobs++ ;
                      maxprofit += jobs[i].profit;
                      break;
                      
                  }
              }
          }
}
