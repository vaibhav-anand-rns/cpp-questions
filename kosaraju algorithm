#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
    int V; // number of vertices
    vector<vector<int>> adj; // adjacency list

public:
    Graph(int V);
    void addEdge(int u, int v);
    void DFS(int v, vector<bool>& visited, vector<int>& component);
    void fillOrder(int v, vector<bool>& visited, stack<int>& Stack);
    Graph getTranspose();
    void printSCCs();
};

// Constructor
Graph::Graph(int V) {
    this->V = V;
    adj.resize(V);
}

// Add a directed edge u -> v
void Graph::addEdge(int u, int v) {
    adj[u].push_back(v);
}

// A recursive DFS that fills stack with vertices (in finish order)
void Graph::fillOrder(int v, vector<bool>& visited, stack<int>& Stack) {
    visited[v] = true;
    for (int neighbor : adj[v])
        if (!visited[neighbor])
            fillOrder(neighbor, visited, Stack);
    Stack.push(v);
}

// Transpose the graph (reverse all edges)
Graph Graph::getTranspose() {
    Graph g(V);
    for (int u = 0; u < V; ++u)
        for (int v : adj[u])
            g.adj[v].push_back(u); // reverse edge
    return g;
}

// Standard DFS to collect a component
void Graph::DFS(int v, vector<bool>& visited, vector<int>& component) {
    visited[v] = true;
    component.push_back(v);
    for (int neighbor : adj[v])
        if (!visited[neighbor])
            DFS(neighbor, visited, component);
}

// Main function to print all strongly connected components
void Graph::printSCCs() {
    stack<int> Stack;
    vector<bool> visited(V, false);

    // Step 1: Fill vertices in stack according to their finish time
    for (int i = 0; i < V; i++)
        if (!visited[i])
            fillOrder(i, visited, Stack);

    // Step 2: Get transposed graph
    Graph gr = getTranspose();

    // Step 3: Do DFS on transposed graph in order of decreasing finish times
    fill(visited.begin(), visited.end(), false);

    cout << "Strongly Connected Components are:\n";
    while (!Stack.empty()) {
        int v = Stack.top();
        Stack.pop();

        if (!visited[v]) {
            vector<int> component;
            gr.DFS(v, visited, component);

            // Print one SCC
            for (int node : component)
                cout << node << " ";
            cout << endl;
        }
    }
}

// ----------- Sample Usage ---------------
int main() {
    Graph g(5);
    g.addEdge(1, 0);
    g.addEdge(0, 2);
    g.addEdge(2, 1);
    g.addEdge(0, 3);
    g.addEdge(3, 4);

    g.printSCCs();

    return 0;
}
