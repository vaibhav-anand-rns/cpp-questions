struct Edge {
    int u, v, weight;
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

int kruskalMST(int V, vector<Edge>& edges) {
    sort(edges.begin(), edges.end()); // Step 1: Sort edges
    DisjointSet ds(V); // Step 2: Disjoint Set for cycle detection

    int mstWeight = 0;
    int edgesUsed = 0;

    for (const auto& edge : edges) {
        if (ds.find(edge.u) != ds.find(edge.v)) {
            ds.unionSets(edge.u, edge.v);
            mstWeight += edge.weight;
            edgesUsed++;

            cout << "Edge added: (" << edge.u << ", " << edge.v << ") weight = " << edge.weight << endl;

            if (edgesUsed == V - 1) break;
        }
    }

    return mstWeight;
}
