class solution{
    public:
          
          int longestBitonicSubsequence(vector<int>& arr){
              
              int n = arr.size();
              vector<int> lis(n,1);
              vector<int> lds(n,1);
              
              //compute lis
              for(int i = 0; i<n; i++){
                  for(int j = 0; j<i; j++){
                      if(arr[j] < arr[i]){
                          
                          lis[i] = max(lis[i],lis[j+1]);
                      }
                  }
              }
              
              //compute lds
              for(int i = n-1; i<n; i--){
                  for(int j = n-1; j>i; j--){
                      if(arr[j]<arr[i]){
                          lds[i] = max(lds[i],lds[j]+1);
                          
                      }
                      
                  }
              }
              //combine lds andlis
              int maxlen = 0;
              for(int i = 0; i<n; i++){
                   maxLen = max(maxLen, lis[i] + lds[i] - 1);
              }
              return maxlen;
              
          }
}
