#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
    vector<vector<int>> mat;
    int n;
    vector<vector<int>> memo;

    int minPath(int i, int j) {
        // Boundary check
        if (j < 0 || j >= n) return INT_MAX; 

        // Base case: last row
        if (i == n - 1) return mat[i][j];

        if (memo[i][j] != -1) return memo[i][j];

        int down = minPath(i + 1, j);
        int downLeft = minPath(i + 1, j - 1);
        int downRight = minPath(i + 1, j + 1);

        memo[i][j] = mat[i][j] + min({down, downLeft, downRight});
        return memo[i][j];
    }

public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        mat = matrix;
        n = mat.size();
        memo.assign(n, vector<int>(n, -1));

        int result = INT_MAX;
        for (int j = 0; j < n; j++) {
            result = min(result, minPath(0, j));
        }
        return result;
    }
};

int main() {
    vector<vector<int>> matrix = {
        {2, 1, 3},
        {6, 5, 4},
        {7, 8, 9}
    };

    Solution sol;
    cout << "Minimum falling path sum: " << sol.minFallingPathSum(matrix) << endl;

    return 0;
}
