#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

const int MOD = 1e9 + 7;
const long long INF = 1e18;

int countShortestPaths(int n, vector<vector<pair<int, int>>>& adj, int source, int dest) {
    vector<long long> dist(n, INF);
    vector<int> ways(n, 0);
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<>> pq;

    dist[source] = 0;
    ways[source] = 1;
    pq.push({0, source});

    while (!pq.empty()) {
        auto [d, u] = pq.top();
        pq.pop();

        if (d > dist[u]) continue;

        for (auto [v, w] : adj[u]) {
            long long new_dist = dist[u] + w;
            if (new_dist < dist[v]) {
                dist[v] = new_dist;
                ways[v] = ways[u];
                pq.push({new_dist, v});
            } else if (new_dist == dist[v]) {
                ways[v] = (ways[v] + ways[u]) % MOD;
            }
        }
    }

    return ways[dest];
}

int main() {
    int n = 5; // number of nodes
    vector<vector<pair<int, int>>> adj(n);

    // Example edges: u --(w)--> v
    adj[0].push_back({1, 2});
    adj[0].push_back({2, 1});
    adj[1].push_back({3, 1});
    adj[2].push_back({3, 2});
    adj[3].push_back({4, 1});

    int source = 0, dest = 4;

    int result = countShortestPaths(n, adj, source
