#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int orangesRotting(vector<vector<int>>& grid) {
    int rows = grid.size();
    int cols = grid[0].size();
    queue<pair<int, int>> q;
    int freshOranges = 0;
    
    // Step 1: Add all rotten oranges to the queue and count fresh ones
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (grid[i][j] == 2) {
                q.push({i, j});
            } else if (grid[i][j] == 1) {
                ++freshOranges;
            }
        }
    }

    // If there are no fresh oranges, return 0
    if (freshOranges == 0) return 0;

    int minutes = 0;
    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    // BFS traversal
    while (!q.empty()) {
        int size = q.size();
        bool rotted = false;

        for (int i = 0; i < size; ++i) {
            auto [x, y] = q.front();
            q.pop();

            for (auto [dx, dy] : directions) {
                int nx = x + dx, ny = y + dy;
                
                // If it's a fresh orange, rot it and add to queue
                if (nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] == 1) {
                    grid[nx][ny] = 2;
                    q.push({nx, ny});
                    --freshOranges;
                    rotted = true;
                }
            }
        }

        if (rotted) ++minutes;
    }

    return (freshOranges == 0) ? minutes : -1;
}

int main() {
    vector<vector<int>> grid = {
        {2,1,1},
        {1,1,0},
        {0,1,1}
    };

    int result = orangesRotting(grid);
    cout << "Minutes to rot all oranges: " << result << endl;

    return 0;
}
