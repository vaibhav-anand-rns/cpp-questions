class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());

        if (wordSet.find(endWord) == wordSet.end()) {
            return 0; // endWord must be in the word list
        }

        queue<pair<string, int>> q; // stores {current word, level/depth}
        q.push({beginWord, 1});
        unordered_set<string> visited;
        visited.insert(beginWord);

        while (!q.empty()) {
            auto [word, level] = q.front();
            q.pop();

            if (word == endWord) return level;

            for (int i = 0; i < word.length(); ++i) {
                string temp = word;
                for (char c = 'a'; c <= 'z'; ++c) {
                    temp[i] = c;

                    if (wordSet.find(temp) != wordSet.end() && visited.find(temp) == visited.end()) {
                        q.push({temp, level + 1});
                        visited.insert(temp);
                    }
                }
            }
        }

        return 0; // No valid transformation path found
    }
};
